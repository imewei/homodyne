name: 🔍 Code Quality Monitoring

on:
  push:
    branches: [main, develop]
    paths:
      - 'homodyne/**/*.py'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/quality-monitoring.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'homodyne/**/*.py'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/quality-monitoring.yml'
  schedule:
    # Run quality checks daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.13'
  POETRY_VERSION: '1.8.0'

jobs:
  quality-analysis:
    name: 🔬 Comprehensive Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          pyproject.toml
          requirements*.txt

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: 🧹 Code Formatting Check
      run: |
        echo "::group::🎨 Ruff Format Check"
        ruff format --check --diff homodyne/
        echo "::endgroup::"
        
        echo "::group::🔧 Black Format Check"  
        black --check --diff homodyne/
        echo "::endgroup::"

    - name: 📊 Linting Analysis
      run: |
        echo "::group::⚡ Ruff Linting"
        ruff check homodyne/ --output-format=github
        echo "::endgroup::"
        
        echo "::group::🔍 Additional Linting"
        # Allow non-zero exit codes for reporting but continue workflow
        pylint homodyne/ --output-format=colorized --reports=y --score=y || true
        echo "::endgroup::"

    - name: 🔐 Security Analysis
      run: |
        echo "::group::🛡️ Bandit Security Scan"
        bandit -r homodyne/ -f json -o bandit-report.json -ll
        
        # Pretty print summary for logs
        echo "=== Security Analysis Summary ==="
        jq '.metrics._totals' bandit-report.json || echo "No security issues found"
        echo "::endgroup::"

    - name: 🔤 Type Checking
      run: |
        echo "::group::📝 MyPy Type Analysis"
        mypy homodyne/ --show-error-codes --no-error-summary --ignore-missing-imports || true
        echo "::endgroup::"

    - name: 🧪 Fast Test Suite
      run: |
        echo "::group::⚡ Fast Quality Tests"
        pytest -m "not slow and not integration" \
               --tb=short \
               --maxfail=3 \
               -x \
               -q \
               --cov=homodyne \
               --cov-report=xml \
               --cov-report=term-missing:skip-covered
        echo "::endgroup::"

    - name: 📈 Performance Benchmarks
      run: |
        echo "::group::🏃 Performance Testing"
        if [ -f scripts/run_performance_tests.py ]; then
          python scripts/run_performance_tests.py --ci --verbose || echo "⚠️ Performance tests completed with warnings"
        else
          echo "⚠️ Performance test script not found, skipping benchmarks"
        fi
        echo "::endgroup::"

    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-homodyne

    - name: 📋 Generate Quality Report
      if: always()
      run: |
        echo "::group::📊 Quality Metrics Summary"
        echo "## 🔍 Code Quality Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Lines of code
        echo "**📏 Code Metrics:**" >> $GITHUB_STEP_SUMMARY
        echo "- Total Python files: $(find homodyne/ -name '*.py' | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- Lines of code: $(find homodyne/ -name '*.py' -exec wc -l {} + | tail -1 | awk '{print $1}')" >> $GITHUB_STEP_SUMMARY
        
        # Security summary
        if [ -f bandit-report.json ]; then
          HIGH_ISSUES=$(jq '.metrics._totals."SEVERITY.HIGH" // 0' bandit-report.json)
          MEDIUM_ISSUES=$(jq '.metrics._totals."SEVERITY.MEDIUM" // 0' bandit-report.json)  
          LOW_ISSUES=$(jq '.metrics._totals."SEVERITY.LOW" // 0' bandit-report.json)
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🛡️ Security Analysis:**" >> $GITHUB_STEP_SUMMARY
          echo "- High severity: $HIGH_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "- Medium severity: $MEDIUM_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "- Low severity: $LOW_ISSUES" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**✅ Quality Status:** Analysis Complete" >> $GITHUB_STEP_SUMMARY
        echo "::endgroup::"

    - name: 💾 Archive Quality Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports-${{ github.sha }}
        path: |
          bandit-report.json
          coverage.xml
          homodyne/tests/performance_baselines.json
        retention-days: 30

  type-coverage-analysis:
    name: 📝 Type Coverage Analysis  
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          pyproject.toml
          requirements*.txt

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: 📊 Advanced Type Analysis
      run: |
        echo "::group::🔍 Type Coverage Report"
        
        # Generate detailed type coverage
        mypy homodyne/ \
          --html-report mypy-report \
          --show-error-codes \
          --ignore-missing-imports \
          --strict-optional || true
          
        echo "Type analysis complete - see artifacts for detailed report"
        echo "::endgroup::"

    - name: 💾 Upload Type Reports
      uses: actions/upload-artifact@v4
      with:
        name: type-coverage-${{ github.sha }}
        path: mypy-report/
        retention-days: 14

  dependency-analysis:
    name: 📦 Dependency Security & Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          pyproject.toml
          requirements*.txt

    - name: 🔍 Dependency Security Audit
      run: |
        pip install pip-audit safety
        
        echo "::group::🔐 Pip Audit"
        pip-audit --format=json --output=pip-audit.json || true
        pip-audit --format=text || true
        echo "::endgroup::"
        
        echo "::group::🛡️ Safety Check"
        safety check --json --output=safety-report.json || true
        safety check || true
        echo "::endgroup::"

    - name: 📊 License Compliance
      run: |
        pip install pip-licenses
        
        echo "::group::📄 License Analysis"
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --summary
        echo "::endgroup::"

    - name: 💾 Upload Dependency Reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-analysis-${{ github.sha }}
        path: |
          pip-audit.json
          safety-report.json
          licenses.json

  performance-regression:
    name: 🏃 Performance Regression Detection
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          pyproject.toml
          requirements*.txt

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-benchmark

    - name: 🏃 Run Baseline Benchmarks
      run: |
        echo "::group::📊 Performance Baseline"
        # Fetch main branch for comparison
        git fetch origin main:baseline-main
        git stash --include-untracked
        git checkout baseline-main
        if [ -f scripts/run_performance_tests.py ]; then
          python scripts/run_performance_tests.py --update-baselines --verbose || true
          cp homodyne/tests/performance_baselines.json baseline_main.json 2>/dev/null || echo "No baseline file created"
        else
          echo "Performance test script not found, creating empty baseline"
          echo '{"baseline_date": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > baseline_main.json
        fi
        echo "::endgroup::"

    - name: 🔄 Run Current Branch Benchmarks  
      run: |
        echo "::group::🚀 Current Branch Performance"
        # Return to the original state
        git checkout ${{ github.sha }}
        git stash pop || true
        if [ -f scripts/run_performance_tests.py ]; then
          python scripts/run_performance_tests.py --verbose || true
        else
          echo "Performance test script not found, creating minimal baseline"
          mkdir -p homodyne/tests/
          echo '{"baseline_date": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > homodyne/tests/performance_baselines.json
        fi
        echo "::endgroup::"

    - name: 📊 Compare Performance
      run: |
        echo "::group::⚖️ Performance Comparison"
        python -c "
import json
import sys

with open('baseline_main.json') as f:
    baseline = json.load(f)
    
with open('homodyne/tests/performance_baselines.json') as f:
    current = json.load(f)

print('=== Performance Regression Analysis ===')
print(f'Baseline: {baseline.get(\"baseline_date\", \"unknown\")}')
print(f'Current:  {current.get(\"baseline_date\", \"unknown\")}')
print()

# Add regression detection logic here
print('Performance analysis complete - detailed results in artifacts')
"
        echo "::endgroup::"

  quality-gate:
    name: 🚪 Quality Gate Check
    runs-on: ubuntu-latest
    needs: [quality-analysis, type-coverage-analysis, dependency-analysis]
    if: always()

    steps:
    - name: 🎯 Evaluate Quality Gate
      run: |
        echo "::group::🚪 Quality Gate Evaluation"
        
        QUALITY_STATUS="${{ needs.quality-analysis.result }}"
        TYPE_STATUS="${{ needs.type-coverage-analysis.result }}"
        DEPENDENCY_STATUS="${{ needs.dependency-analysis.result }}"
        
        echo "Quality Analysis: $QUALITY_STATUS"
        echo "Type Coverage: $TYPE_STATUS"  
        echo "Dependency Analysis: $DEPENDENCY_STATUS"
        
        # Determine overall quality gate status
        if [[ "$QUALITY_STATUS" == "success" && "$TYPE_STATUS" == "success" && "$DEPENDENCY_STATUS" == "success" ]]; then
          echo "✅ QUALITY GATE: PASSED"
          echo "quality_gate_status=passed" >> $GITHUB_ENV
        else
          echo "❌ QUALITY GATE: FAILED"
          echo "quality_gate_status=failed" >> $GITHUB_ENV
        fi
        echo "::endgroup::"

    - name: 📊 Quality Gate Summary
      run: |
        echo "## 🚪 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** ${{ env.quality_gate_status == 'passed' && '✅ PASSED' || '❌ FAILED' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Component Results:**" >> $GITHUB_STEP_SUMMARY
        echo "- 🔬 Quality Analysis: ${{ needs.quality-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 Type Coverage: ${{ needs.type-coverage-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 Dependency Analysis: ${{ needs.dependency-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*For detailed reports, check the workflow artifacts.*" >> $GITHUB_STEP_SUMMARY

    - name: 🚫 Fail on Quality Gate Failure
      if: env.quality_gate_status == 'failed'
      run: |
        echo "❌ Quality gate failed - blocking merge"
        exit 1