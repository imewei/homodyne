name: Robust Documentation Deployment

on:
  push:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: write  # Need write permission to push to gh-pages
  pages: write
  id-token: write
  actions: read

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better git operations
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install core documentation dependencies first
        pip install sphinx sphinx-rtd-theme myst-parser numpydoc
        # Then install the package in editable mode
        pip install -e .
        
    - name: Build documentation
      run: |
        cd docs
        make clean
        # Build with explicit error checking
        python -m sphinx -b html -W --keep-going . _build/html
        
        # Verify build success
        if [ ! -f _build/html/index.html ]; then
          echo "‚ùå Documentation build failed - no index.html"
          exit 1
        fi
        
        # Add .nojekyll file to prevent GitHub Pages Jekyll processing
        touch _build/html/.nojekyll
        
        echo "‚úÖ Documentation built successfully"
        echo "üìä Build statistics:"
        echo "  Total files: $(find _build/html -type f | wc -l)"
        echo "  Total size: $(du -sh _build/html | cut -f1)"
        
    - name: Deploy via GitHub Pages API
      run: |
        echo "üöÄ Deploying documentation..."
        
        # Create a temporary git repository in the build output
        cd docs/_build/html
        git init
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Add all files and commit
        git add -A
        git commit -m "Deploy documentation from ${{ github.sha }}"
        
        # Push to gh-pages branch (force push to overwrite)
        git push --force "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" HEAD:gh-pages
        
        echo "‚úÖ Documentation deployed to gh-pages branch"
        
    - name: Configure GitHub Pages (fallback)
      if: failure()
      run: |
        echo "üîß Attempting to configure GitHub Pages via API..."
        
        # Try to enable GitHub Pages with branch source
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/pages" \
          -d '{
            "source": {
              "branch": "gh-pages",
              "path": "/"
            }
          }' || echo "Pages might already be configured"
          
    - name: Final deployment status
      run: |
        echo "üåê Expected documentation URL:"
        echo "https://${{ github.repository_owner }}.github.io/$(echo '${{ github.repository }}' | cut -d'/' -f2)/"
        echo ""
        echo "If deployment failed, check:"
        echo "1. Repository Settings ‚Üí Pages ‚Üí Source = 'Deploy from a branch' + 'gh-pages'"
        echo "2. Repository is public or has GitHub Pages enabled"
        echo "3. GitHub Pages is enabled for this repository"
