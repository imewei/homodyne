name: Build and Deploy Documentation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  # Allow manual workflow dispatch for testing
  workflow_dispatch:

# Ensure the GITHUB_TOKEN has necessary permissions
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read
  security-events: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[docs]
    
    - name: Build documentation
      run: |
        cd docs
        make clean
        make html
        # Check if build was successful
        if [ ! -f _build/html/index.html ]; then
          echo "‚ùå Documentation build failed - index.html not found"
          ls -la _build/html/ || echo "No _build/html directory"
          exit 1
        fi
        echo "‚úÖ Documentation built successfully"
        echo "üìÅ Generated files:"
        find _build/html -name "*.html" | head -10
        echo "üìä Build statistics:"
        echo "  Total HTML files: $(find _build/html -name "*.html" | wc -l)"
        echo "  Total size: $(du -sh _build/html)"
    
    - name: Upload documentation artifacts
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/_build/html
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Debug repository context
      run: |
        echo "üîç Repository debugging info:"
        echo "Repository: ${{ github.repository }}"
        echo "Repository owner: ${{ github.repository_owner }}"
        echo "Ref: ${{ github.ref }}"
        echo "Event: ${{ github.event_name }}"
        echo "Actor: ${{ github.actor }}"
        
    - name: Setup Pages
      id: setup-pages
      uses: actions/configure-pages@v5
      with:
        # Automatically enable GitHub Pages if not already enabled
        enablement: true
      continue-on-error: false  # Let this fail if there are permission issues
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      with:
        timeout: 600000  # 10 minutes timeout
      
    - name: Deployment success
      if: steps.deployment.outcome == 'success'
      run: |
        echo "üéâ GitHub Pages deployment successful!"
        echo "üìñ Documentation URL: ${{ steps.deployment.outputs.page_url }}"
        
    - name: Deployment failure troubleshooting
      if: failure()
      run: |
        echo "‚ùå GitHub Pages deployment failed"
        echo ""
        echo "üîß TROUBLESHOOTING CHECKLIST:"
        echo ""
        echo "1. Repository Settings:"
        echo "   - Go to: https://github.com/${{ github.repository }}/settings/pages"
        echo "   - Source must be set to: 'GitHub Actions'"
        echo "   - NOT 'Deploy from a branch'"
        echo ""
        echo "2. Repository Permissions:"
        echo "   - Repository must be public OR have GitHub Pages enabled for private repos"
        echo "   - Workflow must have 'pages: write' permission (‚úì configured)"
        echo "   - Repository owner must have Pages feature enabled"
        echo ""
        echo "3. Branch Protection:"
        echo "   - Check if 'main' branch has protection rules that block deployments"
        echo "   - Ensure GitHub Actions can deploy to Pages"
        echo ""
        echo "4. Organization Settings (if applicable):"
        echo "   - Organization may have Pages disabled for repositories"
        echo "   - Check organization-level Pages policies"
        echo ""
        echo "üåê Manual Setup Instructions:"
        echo "1. Go to: https://github.com/${{ github.repository }}/settings/pages"
        echo "2. Under 'Source', select 'GitHub Actions'"
        echo "3. Save the settings"
        echo "4. Re-run this workflow"
        echo ""
        exit 1

  test-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[docs]
    
    - name: Test documentation build
      run: |
        cd docs
        make html
        # Check for critical errors that would prevent deployment
        if [ -f _build/html/index.html ]; then
          echo "‚úÖ Documentation built successfully"
        else
          echo "‚ùå Documentation build failed - index.html not found"
          exit 1
        fi
