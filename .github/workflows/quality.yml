name: Weekly Quality Analysis

on:
  schedule:
    # Run every Sunday at 3 AM UTC
    - cron: "0 3 * * 0"
  workflow_dispatch:
    inputs:
      full_analysis:
        description: "Run comprehensive analysis"
        required: false
        default: true
        type: boolean

env:
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1

jobs:
  comprehensive-analysis:
    name: Comprehensive Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "pyproject.toml"

      - name: Install analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
          pip install vulture radon mccabe pipdeptree pip-licenses safety pip-audit

      - name: Code complexity analysis
        run: |
          echo "# 📊 Code Quality Report - $(date)" > quality_report.md
          echo "" >> quality_report.md
          echo "Generated for commit: ${{ github.sha }}" >> quality_report.md
          echo "" >> quality_report.md

          echo "## 🔢 Code Metrics" >> quality_report.md
          echo "" >> quality_report.md
          
          echo "### Cyclomatic Complexity" >> quality_report.md
          echo '```' >> quality_report.md
          python -m mccabe --min 10 homodyne/ >> quality_report.md || echo "No high-complexity functions found" >> quality_report.md
          echo '```' >> quality_report.md
          echo "" >> quality_report.md

          echo "### Maintainability Index" >> quality_report.md
          echo '```' >> quality_report.md
          radon mi homodyne/ >> quality_report.md || true
          echo '```' >> quality_report.md
          echo "" >> quality_report.md

      - name: Dead code detection
        continue-on-error: true
        run: |
          echo "### 🪦 Dead Code Detection" >> quality_report.md
          echo '```' >> quality_report.md
          vulture homodyne/ --min-confidence 80 >> quality_report.md || echo "No dead code detected" >> quality_report.md
          echo '```' >> quality_report.md
          echo "" >> quality_report.md

      - name: Dependency analysis
        run: |
          echo "## 📦 Dependencies" >> quality_report.md
          echo "" >> quality_report.md
          
          echo "### Dependency Tree" >> quality_report.md
          echo '```' >> quality_report.md
          pipdeptree >> quality_report.md || true
          echo '```' >> quality_report.md
          echo "" >> quality_report.md

          echo "### License Analysis" >> quality_report.md
          echo '```' >> quality_report.md
          pip-licenses --format=markdown >> quality_report.md || true
          echo '```' >> quality_report.md
          echo "" >> quality_report.md

      - name: Security analysis
        run: |
          echo "## 🛡️ Security Analysis" >> quality_report.md
          echo "" >> quality_report.md

          echo "### Vulnerability Scan" >> quality_report.md
          echo '```' >> quality_report.md
          safety check >> quality_report.md 2>&1 || echo "Safety check completed with warnings" >> quality_report.md
          echo "" >> quality_report.md
          pip-audit >> quality_report.md 2>&1 || echo "Pip-audit completed with warnings" >> quality_report.md
          echo '```' >> quality_report.md
          echo "" >> quality_report.md

          # Detailed security scan
          bandit -r homodyne/ -f json -o bandit-detailed.json || true
          echo "### Code Security Issues" >> quality_report.md
          echo '```' >> quality_report.md
          bandit -r homodyne/ >> quality_report.md 2>&1 || echo "Bandit scan completed" >> quality_report.md
          echo '```' >> quality_report.md

      - name: Test coverage analysis
        run: |
          echo "" >> quality_report.md
          echo "## 🧪 Test Coverage" >> quality_report.md
          echo "" >> quality_report.md
          
          # Run comprehensive test suite with coverage
          coverage run -m pytest homodyne/tests/ --tb=no -q || true
          
          echo '```' >> quality_report.md
          coverage report --show-missing >> quality_report.md || true
          echo '```' >> quality_report.md
          
          # Generate HTML coverage report
          coverage html -d coverage_html || true

      - name: Performance baseline
        continue-on-error: true
        run: |
          echo "" >> quality_report.md
          echo "## ⚡ Performance Metrics" >> quality_report.md
          echo "" >> quality_report.md
          
          echo '```' >> quality_report.md
          pytest homodyne/tests/ -m "performance and not slow" --benchmark-json=perf_baseline.json --tb=no -q >> quality_report.md 2>&1 || echo "Performance tests completed" >> quality_report.md
          echo '```' >> quality_report.md

      - name: Generate summary
        run: |
          echo "" >> quality_report.md
          echo "## 📋 Summary" >> quality_report.md
          echo "" >> quality_report.md
          echo "- **Generated**: $(date)" >> quality_report.md
          echo "- **Commit**: ${{ github.sha }}" >> quality_report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> quality_report.md
          echo "" >> quality_report.md
          echo "📁 **Artifacts Generated**:" >> quality_report.md
          echo "- Comprehensive quality report" >> quality_report.md
          echo "- Security analysis (JSON)" >> quality_report.md
          echo "- Test coverage (HTML)" >> quality_report.md
          echo "- Performance baseline (JSON)" >> quality_report.md

      - name: Upload comprehensive reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-analysis-${{ github.run_number }}
          path: |
            quality_report.md
            bandit-detailed.json
            coverage_html/
            perf_baseline.json
          retention-days: 90

      - name: Create job summary
        run: |
          echo "## 📊 Weekly Quality Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Generated Reports" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code complexity and maintainability metrics" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dead code detection analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependency and license analysis" >> $GITHUB_STEP_SUMMARY  
          echo "- ✅ Security vulnerability assessment" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Comprehensive test coverage report" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Performance baseline metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📥 **Download**: All reports are available as workflow artifacts (retained for 90 days)" >> $GITHUB_STEP_SUMMARY

  create-issue:
    name: Create Quality Report Issue
    runs-on: ubuntu-latest
    needs: comprehensive-analysis
    if: always() && github.event_name == 'schedule'
    permissions:
      issues: write
      contents: read
    steps:
      - name: Download report
        uses: actions/download-artifact@v4
        with:
          name: quality-analysis-${{ github.run_number }}

      - name: Create issue with report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let reportContent = '';
            if (fs.existsSync('quality_report.md')) {
              reportContent = fs.readFileSync('quality_report.md', 'utf8');
              
              // Truncate if too long for GitHub issue
              const maxLength = 50000;
              if (reportContent.length > maxLength) {
                reportContent = reportContent.substring(0, maxLength) + '\n\n... (Report truncated. See full report in workflow artifacts)';
              }
            } else {
              reportContent = 'Quality analysis completed. Please check workflow artifacts for detailed reports.';
            }

            const issueTitle = `📊 Weekly Quality Report - ${new Date().toISOString().split('T')[0]}`;
            
            const issueBody = \`## Weekly Quality Analysis Report

            \${reportContent}

            ---
            *This issue was automatically created by the Weekly Quality Analysis workflow.*
            *View full artifacts: https://github.com/\${{ github.repository }}/actions/runs/\${{ github.run_id }}*\`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['quality', 'automated', 'weekly-report']
            });