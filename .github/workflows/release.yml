name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI

env:
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1

jobs:
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Extract and validate version
        id: version
        run: |
          # Extract version from tag or input
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ inputs.version }}"
          fi
          
          echo "Validating version: $VERSION"
          
          # Check version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)*$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version format is valid: $VERSION"

      - name: Quick test
        run: |
          # Quick install and test
          python -m pip install --upgrade pip build twine
          pip install -e ".[test]"
          
          # Run only fast tests
          python -m pytest homodyne/tests/ -x --tb=line -q -m "not slow" --maxfail=2
          
          # Quick package build test
          python -m build --wheel
          twine check dist/*
          
          echo "✅ Release validation passed"

  build-and-publish:
    name: Build and Publish Release
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip build twine
          pip install -e ".[docs]"

      - name: Build package
        run: |
          python -m build
          echo "✅ Package built successfully"

      - name: Build documentation
        run: |
          cd docs
          make clean
          make html
          tar -czf ../dist/documentation.tar.gz -C _build/html .
          echo "✅ Documentation built and packaged"

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          # Simple changelog generation (you can enhance this)
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes in $VERSION" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            echo "### Changes since $LAST_TAG:" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%an)" $LAST_TAG..HEAD >> $GITHUB_OUTPUT
          else
            echo "### Initial release" >> $GITHUB_OUTPUT
            echo "- Complete homodyne analysis package" >> $GITHUB_OUTPUT
          fi
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body: |
            # Homodyne ${{ needs.validate.outputs.version }}
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## 📦 Installation
            
            ```bash
            pip install homodyne-analysis
            ```
            
            ## 📊 Assets
            
            - **Source Distribution** (`.tar.gz`)
            - **Wheel Distribution** (`.whl`) 
            - **Documentation** (`documentation.tar.gz`)
            
            ## 🔗 Links
            
            - [📖 Documentation](https://homodyne.readthedocs.io)
            - [🐛 Issues](https://github.com/${{ github.repository }}/issues)
            - [💬 Discussions](https://github.com/${{ github.repository }}/discussions)
          files: |
            dist/*
          prerelease: ${{ inputs.prerelease || false }}
          draft: false

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Uses trusted publishing, no tokens needed
          print-hash: true
          verbose: true

      - name: Verify PyPI publication
        run: |
          # Wait a moment for PyPI to update
          sleep 30
          
          # Extract version number without 'v' prefix
          VERSION="${{ needs.validate.outputs.version }}"
          PYPI_VERSION="${VERSION#v}"
          
          # Try to install from PyPI to verify
          pip install homodyne-analysis==$PYPI_VERSION --no-cache-dir
          python -c "import homodyne; print(f'✅ Successfully installed homodyne v{homodyne.__version__} from PyPI')"

  post-release:
    name: Post-release Actions
    runs-on: ubuntu-latest
    needs: [validate, build-and-publish]
    if: always() && needs.build-and-publish.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release summary
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          PYPI_VERSION="${VERSION#v}"
          
          echo "## 🚀 Release $VERSION Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Actions" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-release validation (tests, metadata)" >> $GITHUB_STEP_SUMMARY
          echo "- Package built and verified" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation generated and packaged" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub release created with changelog" >> $GITHUB_STEP_SUMMARY
          echo "- Published to PyPI with trusted publishing" >> $GITHUB_STEP_SUMMARY
          echo "- Installation verified from PyPI" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Available Now" >> $GITHUB_STEP_SUMMARY
          echo "```bash" >> $GITHUB_STEP_SUMMARY
          echo "pip install homodyne-analysis==$PYPI_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "- [PyPI Package](https://pypi.org/project/homodyne-analysis/$PYPI_VERSION/)" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: needs.build-and-publish.result == 'failure'
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "## ❌ Release $VERSION Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for details and retry if necessary." >> $GITHUB_STEP_SUMMARY