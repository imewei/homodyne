{
  "metadata": {
    "_comment": "Small Dataset Static Isotropic Mode Configuration - Optimized for ~10K data points. 3 parameter optimization (D0, alpha, D_offset) with high precision settings. Supports --plot-experimental-data and --plot-simulated-data for data visualization.",
    "config_version": "0.7.2",
    "description": "Small dataset static isotropic homodyne scattering analysis - high precision 3-parameter model for ~10K data points",
    "based_on": "He et al. PNAS 2024 - Transport coefficient approach (static case) with small dataset optimizations",
    "analysis_mode": "static_isotropic",
    "dataset_optimization": "Optimized for ~10K data points with enhanced precision and conservative sampling",
    "plotting_features": {
      "experimental_data_plotting": "Use --plot-experimental-data or 'hexp' shortcut for validation",
      "simulated_data_plotting": "Use --plot-simulated-data or 'hsim' shortcut with --contrast and --offset",
      "phi_angles_override": "Use --phi-angles 0,45,90,135 to override config angles"
    },
    "parameters_optimized": [
      "D0",
      "alpha",
      "D_offset"
    ],
    "shell_completion": "Use argcomplete for shell completion (conda environments auto-enabled)",
    "script_compatibility": "homodyne v0.7.2"
  },
  "experimental_data": {
    "_comment": "Data source and loading configuration for small datasets",
    "data_folder_path": "./data/SAMPLE_NAME/",
    "data_file_name": "your_small_dataset.hdf",
    "phi_angles_path": "./data/phi_angles/",
    "phi_angles_file": "phi_list.txt",
    "exchange_key": "exchange",
    "cache_file_path": "./data/SAMPLE_NAME/",
    "cache_filename_template": "cached_c2_frames_{start_frame}_{end_frame}.npz",
    "cache_compression": false,
    "_cache_compression_note": "Disabled for full precision with small datasets",
    "data_type": "float64",
    "_data_type_note": "Full precision required for small dataset analysis",
    "file_format": "NPZ",
    "preprocessing": {
      "apply_diagonal_correction": true,
      "vectorized_correction": true,
      "cache_processed_data": true,
      "normalize_data": true,
      "normalization_method": "baseline"
    }
  },
  "analyzer_parameters": {
    "_comment": "Core analysis parameters - static isotropic mode for small datasets",
    "temporal": {
      "dt": 0.1,
      "_dt_note": "Time step between frames in seconds",
      "dt_unit": "seconds",
      "start_frame": 50,
      "_start_frame_note": "Conservative start for small datasets - preserve all useful data",
      "end_frame": 10050,
      "_end_frame_note": "Typical ~10K frame analysis window",
      "frame_description": "Analysis window for small static dataset experiment"
    },
    "scattering": {
      "wavevector_q": 0.01,
      "_q_note": "Scattering wavevector magnitude: q = 4π sin(θ/2)/λ",
      "q_unit": "Å⁻¹",
      "typical_range": [
        0.001,
        0.1
      ]
    },
    "geometry": {
      "stator_rotor_gap": 2000000,
      "_gap_note": "Gap in Angstroms (not critical for static isotropic)",
      "gap_unit": "Å",
      "gap_in_microns": 200
    },
    "computational": {
      "num_threads": "auto",
      "auto_detect_cores": true,
      "max_threads_limit": 12,
      "_max_threads_note": "Conservative threading for small dataset precision",
      "memory_limit_gb": 32,
      "_small_dataset_note": "Higher memory allocation for comprehensive analysis"
    }
  },
  "initial_parameters": {
    "_comment": "Starting values for 3-parameter static isotropic optimization [D0, alpha, D_offset] - conservative for small datasets",
    "values": [
      100.0,
      0.0,
      10.0
    ],
    "parameter_names": [
      "D0",
      "alpha",
      "D_offset"
    ],
    "units": [
      "Å²/s",
      "dimensionless",
      "Å²/s"
    ],
    "physical_meaning": {
      "D0": "Reference diffusion coefficient",
      "alpha": "Power-law exponent for D(t) evolution",
      "D_offset": "Baseline diffusion coefficient"
    },
    "active_parameters": [
      "D0",
      "alpha",
      "D_offset"
    ],
    "parameter_units": {
      "D0": "Å²/s",
      "alpha": "dimensionless",
      "D_offset": "Å²/s"
    }
  },
  "optimization_config": {
    "_comment": "Optimization configuration - angle filtering disabled for isotropic mode, enhanced precision for small datasets",
    "angle_filtering": {
      "enabled": false,
      "_isotropic_note": "Angle filtering disabled for isotropic analysis",
      "target_ranges": [],
      "fallback_to_all_angles": true
    },
    "classical_optimization": {
      "methods": [
        "Nelder-Mead",
        "Gurobi"
      ],
      "_methods_note": "Classical methods: Nelder-Mead (always available), Gurobi (if licensed). Enhanced precision for small datasets.",
      "_usage_flags": {
        "--method classical": "Runs ONLY traditional classical methods: Nelder-Mead, Gurobi (if available)",
        "--method robust": "Runs ONLY the three Robust-* methods for noise resistance",
        "--method all": "Runs all methods above (classical + robust) + MCMC for complete analysis"
      },
      "_gurobi_availability": "Gurobi quadratic programming solver provides an alternative to Nelder-Mead using quadratic approximation of the chi-squared objective function. Requires Gurobi license and installation (pip install gurobipy).",
      "method_options": {
        "Nelder-Mead": {
          "maxiter": 5000,
          "_maxiter_note": "Increased from 1500 - enhanced iterations for small dataset precision",
          "_small_dataset_rationale": "More iterations needed for reliable convergence with limited statistical power",
          "xatol": 1e-08,
          "_xatol_note": "Tighter tolerance (vs 1e-6) for high precision with small datasets",
          "fatol": 1e-08,
          "_fatol_note": "Tighter chi-squared tolerance for precision optimization",
          "adaptive": true,
          "_adaptive_note": "Adaptive step sizes essential for robust convergence"
        },
        "Gurobi": {
          "_comment": "ENHANCED: Trust Region SQP with conservative settings for small datasets",
          "_algorithm": "Iterative trust region SQP optimization with quadratic approximation and adaptive radius",
          "max_iterations": 600,
          "_max_iterations_note": "Increased from 500 - more iterations for small dataset precision",
          "tolerance": 1e-07,
          "_tolerance_note": "Tighter convergence tolerance (vs 1e-6) for small dataset precision",
          "output_flag": 0,
          "_output_flag_note": "Gurobi output verbosity (0=silent, 1=normal)",
          "method": 2,
          "_method_note": "Gurobi solution method (2=barrier method recommended for QP)",
          "time_limit": 180,
          "_time_limit_note": "Increased time limit for careful small dataset optimization",
          "_trust_region_settings": {
            "initial_radius": 0.3,
            "_initial_radius_note": "Smaller radius (vs 1.0) for careful parameter space exploration",
            "max_radius": 3.0,
            "_max_radius_note": "Conservative max radius (vs 10.0) for small dataset reliability",
            "eta1": 0.05,
            "_eta1_note": "Lower threshold (vs 0.25) for more conservative acceptance",
            "eta2": 0.9,
            "_eta2_note": "Higher threshold (vs 0.75) for stricter expansion criteria",
            "gamma1": 0.25,
            "gamma2": 2.0,
            "_gamma2_note": "Conservative expansion (vs 2.0) for small dataset stability",
            "max_trust_iterations": 250,
            "_max_trust_iterations_note": "Increased iterations (vs 100) for thorough optimization",
            "_note": "Conservative trust region parameters for small dataset precision"
          },
          "_usage_note": "Gurobi uses quadratic approximation via finite differences. Best for smooth objective functions with bounds constraints.",
          "_advantages": "Handles bounds constraints naturally, enhanced precision for small datasets",
          "_disadvantages": "Requires license, uses quadratic approximation which may not capture all nonlinearity"
        }
      },
      "selection_strategy": "best_chi_squared",
      "_selection_strategy_note": "How to choose best result when multiple methods are used: best_chi_squared, consensus, first_success",
      "adaptive_target_alpha": 1.0,
      "_adaptive_target_alpha_note": "Target multiplier α for adaptive chi-squared minimization: (χ² - α·DOF)² (recommended range: 0.8-1.2)",
      "_adaptive_target_description": "Minimizes (χ² - α·DOF)² where DOF = N_data - N_params for statistically optimal fit",
      "_adaptive_target_benefits": "Prevents overfitting by targeting statistically reasonable chi-squared values"
    },
    "robust_optimization": {
      "enabled": true,
      "uncertainty_model": "wasserstein",
      "uncertainty_radius": 0.12,
      "_uncertainty_radius_note": "Increased from 0.03 - larger uncertainty for small dataset robustness",
      "n_scenarios": 25,
      "_n_scenarios_note": "Increased from 15 - more scenarios for comprehensive small dataset uncertainty",
      "regularization_alpha": 0.01,
      "regularization_beta": 0.001,
      "solver_settings": {
        "_comment": "Enhanced solver configuration for small dataset robust optimization with tighter tolerances",
        "_solver_hierarchy": "CLARABEL (default) -> SCS (fallback) -> CVXOPT (last resort)",
        "CLARABEL": {
          "_description": "Interior-point solver optimized for 3-parameter static isotropic fitting with small dataset precision",
          "max_iter": 600,
          "_max_iter_note": "Increased from 400 - more iterations for small dataset convergence",
          "tol_gap_abs": 1e-07,
          "_tol_gap_abs_note": "Tighter tolerance (vs 1e-5) for small dataset precision",
          "tol_gap_rel": 1e-07,
          "tol_feas": 1e-07,
          "_tol_feas_note": "Tighter feasibility tolerance (vs 1e-6) for precision",
          "tol_infeas_abs": 1e-07,
          "_tol_infeas_abs_note": "Tighter infeasibility tolerance for small dataset reliability",
          "tol_infeas_rel": 1e-07,
          "tol_ktratio": 1e-06,
          "_tol_ktratio_note": "Tighter KT ratio tolerance for precision optimization",
          "equilibrate_enable": true,
          "equilibrate_max_iter": 50,
          "_equilibrate_max_iter_note": "Increased from 25 - more equilibration for stability",
          "equilibrate_min_scaling": 1e-08,
          "_equilibrate_min_scaling_note": "Tighter scaling bounds for precision",
          "equilibrate_max_scaling": 100000000.0,
          "direct_kkt_solver": true,
          "static_regularization_enable": true,
          "static_regularization_constant": 1e-10,
          "_static_regularization_constant_note": "Tighter regularization for numerical stability",
          "dynamic_regularization_enable": true,
          "presolve_enable": true,
          "verbose": false
        },
        "SCS": {
          "_description": "Conic solver optimized for 3-parameter small dataset problems with enhanced precision",
          "max_iters": 15000,
          "_max_iters_note": "Increased from 8000 - more iterations for small dataset convergence",
          "eps": 1e-07,
          "_eps_note": "Tighter tolerance (vs 1e-4) for small dataset precision",
          "alpha": 1.8,
          "rho_x": 1e-08,
          "_rho_x_note": "Tighter parameter (vs 1e-6) for enhanced precision",
          "scale": 0.01,
          "_scale_note": "Conservative scaling for small dataset stability",
          "normalize": true,
          "adaptive_scale": true,
          "acceleration_lookback": 12,
          "_acceleration_lookback_note": "Conservative lookback for small dataset stability",
          "time_limit_secs": 300,
          "_time_limit_secs_note": "Increased time limit for thorough optimization",
          "verbose": false
        },
        "CVXOPT": {
          "_description": "Stable fallback solver for 3-parameter small dataset problems",
          "maxiters": 400,
          "_maxiters_note": "Increased from 150 - more iterations for small dataset precision",
          "abstol": 1e-07,
          "_abstol_note": "Tighter absolute tolerance (vs 1e-5) for precision",
          "reltol": 1e-07,
          "_reltol_note": "Tighter relative tolerance (vs 1e-4) for precision",
          "feastol": 1e-07,
          "_feastol_note": "Tighter feasibility tolerance (vs 1e-5) for precision",
          "refinement": 3,
          "_refinement_note": "More refinement steps (vs 2) for enhanced accuracy",
          "verbose": false
        },
        "GUROBI": {
          "_description": "Commercial solver optimized for 3-parameter small dataset problems",
          "_availability": "Requires Gurobi license",
          "Method": 2,
          "CrossOver": -1,
          "BarHomogeneous": 1,
          "BarIterLimit": 1200,
          "_BarIterLimit_note": "Increased from 800 - more iterations for precision",
          "TimeLimit": 600,
          "_TimeLimit_note": "Increased time limit for thorough small dataset optimization",
          "NumericFocus": 3,
          "_NumericFocus_note": "Maximum numeric focus for small dataset precision",
          "OutputFlag": 0,
          "ScaleFlag": 3,
          "_ScaleFlag_note": "Aggressive scaling for numerical stability",
          "BarConvTol": 1e-08,
          "_BarConvTol_note": "Tighter convergence tolerance for precision",
          "FeasibilityTol": 1e-07,
          "_FeasibilityTol_note": "Tighter feasibility tolerance",
          "OptimalityTol": 1e-07,
          "_OptimalityTol_note": "Tighter optimality tolerance",
          "Presolve": 2
        }
      },
      "adaptive_target_alpha": 1.0,
      "_adaptive_target_alpha_note": "Target multiplier α for adaptive chi-squared minimization: (χ² - α·DOF)² (recommended range: 0.8-1.2)",
      "_adaptive_target_description": "Minimizes (χ² - α·DOF)² where DOF = N_data - N_params for statistically optimal fit",
      "_adaptive_target_benefits": "Prevents overfitting by targeting statistically reasonable chi-squared values in robust optimization"
    },
    "mcmc_sampling": {
      "_comment": "Isolated MCMC Backend Architecture - Static Isotropic Mode (3 parameters: D0, alpha, D_offset) with conservative sampling for small datasets",
      "_backend_architecture": {
        "isolation": "Complete separation of PyMC CPU and NumPyro GPU implementations",
        "cpu_implementation": "homodyne.optimization.mcmc_cpu_backend.py",
        "gpu_implementation": "homodyne.optimization.mcmc_gpu_backend.py",
        "conflict_prevention": "Eliminates PyTensor/JAX namespace conflicts through isolated execution",
        "backend_selection": "HOMODYNE_GPU_INTENT environment variable or command-based selection"
      },
      "enabled": true,
      "sampler": "NUTS",
      "draws": 8000,
      "_draws_note": "Increased sample count for small dataset precision - enhanced from 2500",
      "_small_dataset_draws": "Conservative sampling essential for reliable uncertainty quantification with limited data",
      "tune": 2500,
      "_tune_note": "Extended tuning for small dataset convergence - enhanced from 700",
      "_small_dataset_tune": "Extensive tuning required for reliable convergence with limited statistical power",
      "thin": 1,
      "_thin_note": "No thinning for small datasets - preserve all information",
      "chains": 4,
      "cores": 4,
      "target_accept": 0.93,
      "_target_accept_note": "Higher acceptance rate for small dataset precision - enhanced from 0.85",
      "_small_dataset_accept": "Conservative acceptance rate essential for reliable small dataset sampling",
      "max_treedepth": 10,
      "_max_treedepth_note": "Increased exploration for small dataset thoroughness - enhanced from 8",
      "_small_dataset_treedepth": "Deep exploration required for thorough small dataset parameter space coverage",
      "return_inferencedata": true,
      "backend_specific": {
        "cpu_backend": {
          "_implementation": "homodyne.optimization.mcmc_cpu_backend.py",
          "_description": "Isolated PyMC implementation - no JAX dependencies",
          "_command": "homodyne --method mcmc (or HOMODYNE_GPU_INTENT=false)",
          "_isolation": "Pure PyMC environment, complete separation from NumPyro/JAX",
          "init_strategy": "adapt_diag",
          "compute_convergence_checks": true,
          "progressbar": true,
          "pytensor_config": "Automatically configured for CPU-only operation"
        },
        "gpu_backend": {
          "_implementation": "homodyne.optimization.mcmc_gpu_backend.py",
          "_description": "Isolated NumPyro/JAX implementation - no PyMC dependencies",
          "_command": "homodyne-gpu --method mcmc (or HOMODYNE_GPU_INTENT=true)",
          "_platform_support": "Linux with CUDA preferred, intelligent CPU fallback",
          "_isolation": "Pure NumPyro/JAX environment, complete separation from PyMC/PyTensor",
          "init_strategy": "init_to_value",
          "chain_method": "vectorized",
          "progress_bar": true,
          "jit_compile": true,
          "device_memory_fraction": 0.8,
          "jax_config": "Automatically optimized for available hardware"
        }
      },
      "performance_features": {
        "auto_tune_performance": true,
        "use_progressive_sampling": false,
        "_use_progressive_sampling_note": "Disabled for small datasets - use full sampling",
        "use_intelligent_subsampling": false,
        "_use_intelligent_subsampling_note": "Disabled - preserve all data for small datasets",
        "enable_jit_compilation": true,
        "memory_optimization": false,
        "_memory_optimization_note": "Disabled - prioritize precision over memory for small datasets"
      }
    },
    "scaling_parameters": {
      "_comment": "Physical scaling for c2_fitted = c2_theory * contrast + offset with small dataset bounds",
      "fitted_range": {
        "min": 1.0,
        "max": 2.0
      },
      "theory_range": {
        "min": 0.0,
        "max": 1.0
      },
      "contrast": {
        "min": 1e-05,
        "_min_note": "Tighter lower bound for small dataset precision",
        "max": 0.6,
        "_max_note": "Wider upper bound for small dataset exploration",
        "prior_mu": 0.05,
        "prior_sigma": 0.02,
        "_prior_sigma_note": "Wider prior for small dataset uncertainty",
        "type": "TruncatedNormal"
      },
      "offset": {
        "min": 0.5,
        "_min_note": "Wider lower bound for small dataset exploration",
        "max": 1.5,
        "prior_mu": 1.3,
        "prior_sigma": 0.02,
        "_prior_sigma_note": "Wider prior for small dataset uncertainty",
        "type": "TruncatedNormal"
      }
    }
  },
  "parameter_space": {
    "_comment": "Parameter bounds for 3-parameter static isotropic optimization with small dataset considerations",
    "bounds": [
      {
        "name": "D0",
        "min": 0.1,
        "_min_note": "Lower bound for small dataset exploration",
        "max": 10000000.0,
        "_max_note": "Wider bound for small dataset uncertainty",
        "type": "TruncatedNormal",
        "prior_mu": 10000.0,
        "prior_sigma": 2000.0,
        "_prior_sigma_note": "Wider prior for small dataset uncertainty",
        "unit": "Å²/s"
      },
      {
        "name": "alpha",
        "min": -3.0,
        "_min_note": "Wider bound for small dataset exploration",
        "max": 3.0,
        "_max_note": "Wider bound for small dataset exploration",
        "type": "Normal",
        "prior_mu": -1.5,
        "prior_sigma": 0.2,
        "_prior_sigma_note": "Wider prior for small dataset uncertainty",
        "unit": "dimensionless"
      },
      {
        "name": "D_offset",
        "min": -500,
        "_min_note": "Wider bound for small dataset exploration",
        "max": 500,
        "_max_note": "Wider bound for small dataset exploration",
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 20.0,
        "_prior_sigma_note": "Wider prior for small dataset uncertainty",
        "unit": "Å²/s"
      }
    ]
  },
  "analysis_settings": {
    "_comment": "Static isotropic mode configuration for small datasets",
    "static_mode": true,
    "_static_mode_note": "True for static analysis (only D0, alpha, D_offset)",
    "static_submode": "isotropic",
    "_submode_note": "Isotropic mode - no angle dependence",
    "model_description": {
      "static_isotropic": "g₂(t₁,t₂) ~ [exp(-q² ∫ D(t)dt)]² with isotropic symmetry"
    }
  },
  "advanced_settings": {
    "_comment": "Advanced computational settings optimized for small dataset precision",
    "data_loading": {
      "use_diagonal_correction": true,
      "vectorized_diagonal_fix": true
    },
    "chi_squared_calculation": {
      "method": "standard",
      "_scaling_note": "Scaling optimization always enabled for proper chi-squared",
      "minimum_sigma": 1e-12,
      "moving_window_size": 21,
      "moving_window_edge_method": "reflect",
      "_minimum_sigma_note": "Tighter minimum for precision calculations",
      "fast_computation": false,
      "_fast_computation_note": "Disabled for full precision with small datasets",
      "uncertainty_calculation": {
        "enable_uncertainty": true,
        "report_uncertainty": true,
        "minimum_angles_for_uncertainty": 1
      },
      "validity_check": {
        "check_positive_D0": true,
        "check_positive_gamma_dot_t0": false,
        "check_positive_time_dependent": true,
        "check_parameter_bounds": true
      },
      "_adaptive_targeting_note": "Adaptive chi-squared targeting is configured separately in optimization_config.classical_optimization.objective_function and optimization_config.robust_optimization.objective_function",
      "variance_method": "hybrid_limited_irls",
      "_variance_method_note": "Variance estimation methods: 'irls_mad_robust' (15 iterations), 'hybrid_limited_irls' (Global MAD + Huber weights for 25-40x speedup)",
      "_variance_method_options": {
        "irls_mad_robust": "Full IRLS with MAD robust estimation (legacy method)",
        "hybrid_limited_irls": "Improved Hybrid: Global MAD + Huber robust weights + kernel smoothing (25-40x faster)"
      },
      "irls_config": {
        "max_iterations": 18,
        "damping_factor": 0.75,
        "convergence_tolerance": 0.002,
        "initial_sigma_squared": 0.001,
        "_algorithm_note": "IRLS with MAD: σ²ᵢ = (1.4826 × MAD)², damping: σ² = α·σ²_new + (1-α)·σ²_prev - Optimized for small datasets: window=21, iterations=18, damping=0.75",
        "optimized_config": {
          "use_vectorized_mad": true,
          "use_quickselect_median": true,
          "enable_jit_compilation": true,
          "parallel_window_processing": true
        }
      },
      "performance_optimization": {
        "_comment": "Performance optimization settings for chi-squared and IRLS calculations",
        "enabled": true,
        "variance_estimator": "irls_optimized",
        "_variance_estimator_note": "irls_optimized provides 50-100x speedup via JIT compilation and vectorization",
        "chi_calculator": "vectorized_jit",
        "_chi_calculator_note": "vectorized_jit provides 20-50x speedup with memory pooling",
        "median_algorithm": "quickselect",
        "_median_algorithm_note": "quickselect provides 5-10x speedup over numpy median for small arrays",
        "jit_compilation": {
          "enabled": true,
          "warmup_on_init": true,
          "parallel_processing": true,
          "fastmath": true,
          "cache_kernels": true
        },
        "memory_optimization": {
          "use_memory_pool": true,
          "pool_size_mb": 128,
          "adaptive_caching": true,
          "cache_strategy": "lru",
          "max_cache_items": 50
        },
        "parallel_threads": {
          "enabled": true,
          "thread_count": "auto",
          "chunk_size": "adaptive",
          "backend": "threading"
        }
      }
    },
    "numerical_integration": {
      "method": "simpson",
      "relative_tolerance": 1e-10,
      "_relative_tolerance_note": "Tighter tolerance for small dataset precision",
      "absolute_tolerance": 1e-14,
      "_absolute_tolerance_note": "Tighter absolute tolerance for precision"
    },
    "optimization_controls": {
      "convergence_tolerance": 1e-10,
      "_convergence_tolerance_note": "Tighter tolerance for small dataset precision",
      "max_function_evaluations": 15000,
      "_max_function_evaluations_note": "Increased from 5000 for thorough optimization",
      "parameter_scaling": "auto",
      "finite_difference_step": 1e-10,
      "_finite_difference_step_note": "Smaller step for precise derivatives"
    }
  },
  "performance_settings": {
    "_comment": "Performance settings optimized for 3-parameter static case with small dataset precision",
    "caching": {
      "enable_memory_cache": true,
      "enable_disk_cache": true,
      "cache_size_limit_mb": 1000,
      "_cache_size_limit_mb_note": "Increased for small dataset intermediate results",
      "auto_cleanup": false,
      "_auto_cleanup_note": "Disabled to preserve small dataset results"
    },
    "parallel_processing": {
      "enable_multiprocessing": true,
      "chunk_size": "auto",
      "backend": "threading"
    },
    "memory_management": {
      "low_memory_mode": false,
      "garbage_collection_frequency": 5,
      "_garbage_collection_frequency_note": "More frequent GC for small dataset precision",
      "memory_monitoring": true,
      "_memory_monitoring_note": "Enabled for small dataset analysis tracking"
    },
    "numba_optimization": {
      "enable_numba": true,
      "warmup_numba": true,
      "parallel_numba": true,
      "cache_numba": true,
      "stability_enhancements": {
        "enable_kernel_warmup": true,
        "warmup_iterations": 5,
        "_warmup_iterations_note": "Increased from 3 for stability",
        "optimize_memory_layout": true,
        "enable_nogil": true,
        "environment_optimization": {
          "auto_configure": true,
          "max_threads": 2,
          "gc_optimization": true
        }
      },
      "performance_monitoring": {
        "enable_profiling": true,
        "_enable_profiling_note": "Enabled for small dataset optimization tracking",
        "stable_benchmarking": true,
        "_stable_benchmarking_note": "Enabled for small dataset performance validation",
        "adaptive_benchmarking": false,
        "performance_baselines": true,
        "_performance_baselines_note": "Enabled for small dataset comparison",
        "target_cv": 0.05,
        "_target_cv_note": "Tighter coefficient of variation for precision",
        "memory_monitoring": true,
        "smart_caching": {
          "enabled": true,
          "max_items": 100,
          "_max_items_note": "Increased for small dataset intermediate results",
          "max_memory_mb": 500.0,
          "_max_memory_mb_note": "Increased cache size for precision"
        }
      }
    },
    "noise_model": {
      "use_simple_forward_model": false,
      "_note": "False uses full forward model consistent with classical optimization",
      "sigma_prior": 0.05,
      "_sigma_prior_note": "Tighter prior for small dataset precision"
    }
  },
  "validation_rules": {
    "_comment": "Enhanced validation rules for static isotropic analysis with small datasets",
    "data_quality": {
      "check_data_range": true,
      "correlation_minimum": 0.0,
      "correlation_maximum": 10.0,
      "check_nan_values": true,
      "nan_handling": "raise"
    },
    "parameter_validation": {
      "check_bounds": true,
      "physics_constraints": true,
      "correlation_checks": true
    },
    "fit_quality": {
      "_comment": "Quality thresholds for 3-parameter optimization with small dataset considerations",
      "overall_chi_squared": {
        "excellent_threshold": 3.0,
        "_excellent_threshold_note": "Lower threshold for small dataset precision",
        "acceptable_threshold": 7.0,
        "_acceptable_threshold_note": "Lower threshold accounting for limited data",
        "warning_threshold": 15.0,
        "_warning_threshold_note": "Lower threshold for small dataset sensitivity",
        "critical_threshold": 30.0,
        "_critical_threshold_note": "Lower threshold for small dataset analysis"
      },
      "per_angle_chi_squared": {
        "excellent_threshold": 3.0,
        "_excellent_threshold_note": "Lower threshold for small dataset precision",
        "acceptable_threshold": 7.0,
        "_acceptable_threshold_note": "Lower threshold accounting for limited data",
        "warning_threshold": 15.0,
        "_warning_threshold_note": "Lower threshold for small dataset sensitivity",
        "outlier_threshold_multiplier": 2.0,
        "_outlier_threshold_multiplier_note": "More sensitive outlier detection",
        "max_outlier_fraction": 0.15,
        "_max_outlier_fraction_note": "Lower tolerance for outliers in small datasets",
        "min_good_angles": 1
      }
    },
    "mcmc_convergence": {
      "_comment": "Stricter MCMC convergence criteria for 3-parameter case with small datasets",
      "rhat_thresholds": {
        "excellent_threshold": 1.005,
        "_excellent_threshold_note": "Tighter threshold for small dataset precision",
        "good_threshold": 1.02,
        "_good_threshold_note": "Tighter threshold for reliable inference",
        "acceptable_threshold": 1.05,
        "_acceptable_threshold_note": "Tighter threshold for small dataset reliability",
        "critical_threshold": 1.1,
        "_critical_threshold_note": "Conservative critical threshold"
      },
      "ess_thresholds": {
        "excellent_threshold": 800,
        "_excellent_threshold_note": "Higher threshold for small dataset reliability",
        "good_threshold": 400,
        "_good_threshold_note": "Higher threshold for robust inference",
        "acceptable_threshold": 200,
        "_acceptable_threshold_note": "Higher threshold for small dataset precision",
        "minimum_threshold": 100
      },
      "divergence_thresholds": {
        "max_divergences_fraction": 0.02,
        "_max_divergences_fraction_note": "Lower tolerance for divergences with small datasets",
        "warning_divergences_fraction": 0.005,
        "_warning_divergences_fraction_note": "Early warning threshold"
      }
    },
    "frame_range": {
      "minimum_frames": 10,
      "maximum_frames": null,
      "check_continuity": true
    }
  },
  "workflow_integration": {
    "_comment": "Analysis workflow settings enhanced for small dataset analysis",
    "analysis_workflow": {
      "auto_generate_plots": true,
      "plot_integration_enabled": true,
      "plot_experimental_data_on_load": false,
      "cache_plot_data": true,
      "save_intermediate_plots": true,
      "_save_intermediate_plots_note": "Enabled for small dataset diagnostic tracking"
    },
    "mcmc_integration": {
      "auto_save_traces": true,
      "trace_file_format": "netcdf",
      "include_warmup_in_traces": true,
      "_include_warmup_in_traces_note": "Include warmup for small dataset diagnostics",
      "convergence_diagnostics_auto": true,
      "plot_mcmc_results": true
    },
    "data_management": {
      "experimental_data_cache": true,
      "theoretical_data_cache": true,
      "cache_directory": "./cache",
      "auto_cleanup_cache": false,
      "_auto_cleanup_cache_note": "Disabled to preserve small dataset intermediate results",
      "cache_retention_days": 90,
      "_cache_retention_days_note": "Extended retention for small dataset analysis"
    },
    "error_handling": {
      "continue_on_plot_errors": true,
      "log_plot_errors": true,
      "fallback_plotting": true,
      "validate_plot_data": true
    }
  },
  "output_settings": {
    "_comment": "Output and reporting configuration enhanced for small dataset analysis",
    "_output_structure": "homodyne_analysis_results.json (main summary) saved to output directory root. Method-specific results saved to individual directories: classical/[method_name]/ and robust/[method_name]/ containing analysis_results_[method_name].json, parameters.json, fitted_data.npz (consolidated: c2_experimental, c2_fitted, residuals, parameters, uncertainties, chi_squared, phi_angles, t1, t2), and c2_heatmaps_[method_name].png. Summary files: all_classical_methods_summary.json and all_robust_methods_summary.json. MCMC: results saved to mcmc/ subdirectory with same fitted_data.npz structure.",
    "results_directory": "./homodyne_results_small_dataset",
    "_results_directory_note": "Separate directory for small dataset results",
    "file_formats": {
      "results_format": "json",
      "save_intermediate": true,
      "_save_intermediate_note": "Enabled for small dataset diagnostic tracking",
      "compression": false,
      "_compression_note": "Disabled for full precision with small datasets",
      "precision": "float64"
    },
    "file_naming": {
      "timestamp_format": "%Y%m%d_%H%M%S",
      "include_config_name": true,
      "include_chi_squared": true
    },
    "reporting": {
      "generate_plots": true,
      "plot_formats": [
        "png",
        "pdf"
      ],
      "detailed_summary": true,
      "convergence_diagnostics": true
    },
    "plotting": {
      "_comment": "Enhanced plotting configuration for static isotropic mode with small dataset diagnostics",
      "general": {
        "create_plots": true,
        "plot_format": "png",
        "dpi": 300,
        "figure_size": [
          12,
          9
        ],
        "_figure_size_note": "Larger figures for detailed small dataset analysis",
        "style": "publication",
        "save_plots": true,
        "show_plots": false
      },
      "c2_heatmaps": {
        "enabled": true,
        "_method_specific_note": "When multiple optimization methods are used (e.g., Nelder-Mead + Gurobi), separate heatmaps are generated for each method with method names in filenames",
        "layout": "single_row",
        "include_experimental": true,
        "include_theoretical": true,
        "include_residuals": true,
        "include_uncertainty": true,
        "_include_uncertainty_note": "Added for small dataset analysis",
        "colormap": "viridis",
        "colorbar_position": "right",
        "title_prefix": "C2 Correlation Function (Static Isotropic - Small Dataset)",
        "figsize": [
          14,
          5
        ],
        "_figsize_note": "Enhanced size for small dataset diagnostic details"
      },
      "mcmc_plots": {
        "enabled": true,
        "corner_plots": {
          "enabled": true,
          "show_titles": true,
          "quantiles": [
            0.05,
            0.16,
            0.5,
            0.84,
            0.95
          ],
          "_quantiles_note": "Extended quantiles for small dataset uncertainty analysis",
          "show_truths": false,
          "use_arviz": true,
          "figsize": [
            11,
            11
          ],
          "_figsize_note": "Larger for detailed small dataset parameter relationships"
        },
        "trace_plots": {
          "enabled": true,
          "show_chains": true,
          "show_warmup": true,
          "_show_warmup_note": "Enabled for small dataset convergence diagnostics",
          "compact_layout": false,
          "_compact_layout_note": "Full layout for detailed small dataset diagnostics",
          "figsize": [
            12,
            8
          ],
          "_figsize_note": "Larger for detailed trace analysis"
        },
        "convergence_diagnostics": {
          "enabled": true,
          "show_rhat": true,
          "show_ess": true,
          "show_mcse": true,
          "show_energy": true,
          "show_divergences": true,
          "_show_divergences_note": "Added for small dataset MCMC diagnostics",
          "rhat_threshold": 1.05,
          "_rhat_threshold_note": "Tighter threshold for small dataset reliability",
          "ess_threshold": 200,
          "_ess_threshold_note": "Higher threshold for small dataset precision"
        }
      },
      "diagnostic_plots": {
        "enabled": true,
        "chi_squared_summary": true,
        "parameter_correlations": true,
        "residual_analysis": true,
        "convergence_history": true,
        "uncertainty_analysis": true,
        "_uncertainty_analysis_note": "Added for small dataset precision tracking",
        "sensitivity_analysis": true,
        "_sensitivity_analysis_note": "Added for small dataset parameter sensitivity"
      },
      "output": {
        "base_directory": "./plots_small_dataset",
        "_base_directory_note": "Separate plotting directory for small dataset analysis",
        "subdirectories": {
          "c2_heatmaps": "c2_correlation",
          "parameter_plots": "parameters",
          "mcmc_plots": "mcmc_analysis",
          "diagnostics": "diagnostics",
          "uncertainty": "uncertainty_analysis"
        },
        "filename_template": "{analysis_type}_{start_frame}_{end_frame}_{method}_{timestamp}",
        "_filename_template_note": "Frame-aware plotting: includes start_frame, end_frame for data range identification, method name (e.g., Nelder-Mead, Gurobi), and timestamp",
        "include_timestamp": true,
        "overwrite_existing": false
      }
    },
    "logging": {
      "log_level": "DEBUG",
      "_log_level_note": "More detailed logging for small dataset analysis",
      "log_to_file": true,
      "log_to_console": true,
      "log_filename": "homodyne_small_dataset_static_isotropic.log",
      "_log_filename_note": "Specific log file for small dataset analysis",
      "rotation": {
        "max_bytes": 20971520,
        "_max_bytes_note": "Larger log files for detailed small dataset tracking",
        "backup_count": 5,
        "_backup_count_note": "More backups for small dataset analysis history"
      }
    }
  }
}