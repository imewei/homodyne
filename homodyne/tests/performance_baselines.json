{
  "test_vectorized_angle_filtering_small_dataset": {
    "execution_time": 0.005,
    "memory_mb": 1.0,
    "speedup_ratio": 0.5
  },
  "test_vectorized_angle_filtering_medium_dataset": {
    "execution_time": 0.008,
    "memory_mb": 2.0,
    "speedup_ratio": 1.2
  },
  "test_cache_key_generation_performance": {
    "cache_lookup_time": 0.0001,
    "memory_mb": 0.5
  },
  "test_memory_mapped_file_loading": {
    "regular_loading_time": 0.1,
    "mmap_loading_time": 0.05,
    "memory_mb": 5.0
  },
  "test_lazy_array_allocation": {
    "pre_allocation_memory": 10.0,
    "lazy_allocation_memory": 8.0,
    "execution_time": 0.1
  },
  "test_memory_efficiency_integration": {
    "peak_memory_mb": 15.0,
    "execution_time": 1.0
  },
  "test_lazy_import_mcmc": {
    "import_time": 0.01,
    "memory_mb": 0.5
  },
  "test_lazy_import_plotting": {
    "import_time": 0.02,
    "memory_mb": 1.0
  },
  "test_chi_squared_calculation_benchmark": {
    "execution_time_median": 0.000202,
    "execution_time_mean": 0.000226,
    "execution_time_95th_percentile": 0.0004,
    "execution_time_max_acceptable": 0.002,
    "memory_mb": 8.0,
    "optimizations_applied": {
      "config_caching": "Cached validation and chi-squared configurations to avoid repeated dict lookups",
      "memory_optimization": "Pre-allocated arrays with reshape instead of list comprehensions",
      "least_squares_optimization": "Replaced lstsq with solve for 2x2 system optimization",
      "vectorized_operations": "Improved angle filtering and array operations",
      "variance_precomputation": "Pre-computed variance estimates for all angles to avoid repeated std() calls",
      "numba_kernel_integration": "Integrated compute_chi_squared_with_sigma_numba for JIT-compiled chi-squared calculation",
      "batch_processing": "Implemented solve_least_squares_batch_numba for vectorized least squares solving",
      "vectorized_chi_squared": "Added compute_chi_squared_batch_numba for batch chi-squared computation",
      "memory_layout_optimization": "Optimized memory access patterns and eliminated loop-based matrix operations"
    },
    "performance_improvements": {
      "phase_1_speedup": 1.18,
      "phase_2_speedup": 1.23,
      "phase_3_speedup": 2.71,
      "total_speedup_from_original": 2.71,
      "baseline_time_ms": 0.546,
      "phase_1_time_ms": 0.463,
      "phase_2_time_ms": 0.444,
      "optimized_time_ms": 0.202,
      "chi2_correlation_ratio": "Improved from 43x to 15.6x (64% reduction)",
      "phase_2_improvement": "4.2% faster than Phase 1",
      "phase_3_improvement": "54.6% faster than Phase 2, 63.1% faster than original",
      "phase_2_optimizations": {
        "memory_pooling": "Reduced allocation overhead",
        "solve_optimization": "Used solve() instead of lstsq() for 2x2 systems",
        "early_validation": "Short-circuit returns for invalid parameters",
        "vectorized_variance": "Pre-computed variance estimates"
      }
    }
  },
  "test_correlation_calculation_benchmark": {
    "execution_time_median": 0.000225,
    "execution_time_mean": 0.000234,
    "execution_time_95th_percentile": 0.00035,
    "execution_time_max_acceptable": 0.001,
    "memory_mb": 5.0,
    "variance_notes": "JIT compilation causes initial warmup overhead. Stable after 5 warmup runs with comprehensive function-level warmup.",
    "performance_characteristics": {
      "warmup_required": true,
      "jit_sensitive": true,
      "expected_speedup_over_baseline": "10-15x faster than original 200ms target",
      "stability_improvements": "Uses stable_benchmark with outlier filtering and higher CV tolerance for JIT variability"
    },
    "optimizations_applied": {
      "memory_pooling": "Pre-allocated result arrays to avoid repeated allocations",
      "static_case_optimization": "Enhanced vectorized static case with efficient broadcasting",
      "precomputed_integrals": "Cached shear integrals to avoid redundant computation"
    }
  },
  "correlation_calculation_stable_benchmark": {
    "expected_median_time": 0.00022,
    "max_acceptable_time": 0.001,
    "performance_notes": "Optimized version maintains sub-millisecond performance with improved memory efficiency"
  },
  "performance_regression_thresholds": {
    "chi_squared_local_ms": 2.0,
    "chi_squared_ci_ms": 10.0,
    "correlation_local_ms": 1.0,
    "correlation_ci_ms": 5.0,
    "ratio_local_max": 3.0,
    "ratio_ci_max": 20.0,
    "ci_detection": "Uses CI and GITHUB_ACTIONS environment variables",
    "timing_precision_threshold_ms": 1.0,
    "notes": "CI environments have higher variability due to virtualization and resource contention"
  }
}
