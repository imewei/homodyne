[build-system]
requires = [
    "setuptools>=77.0.0",
    "wheel>=0.40.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "homodyne-analysis"
version = "0.7.2"
description = "High-performance analysis of homodyne X-ray Photon Correlation Spectroscopy (XPCS) for soft matter dynamics"
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Environment :: GPU :: NVIDIA CUDA :: 12",
    "Natural Language :: English",
    "Typing :: Typed",
]
keywords = [
    "xpcs",
    "x-ray-scattering", 
    "homodyne",
    "correlation-spectroscopy",
    "soft-matter",
    "nonequilibrium-dynamics",
    "transport-coefficients",
    "bayesian-analysis",
    "mcmc",
    "isolated-backends",
    "optimization",
    "gpu-acceleration",
    "scientific-computing",
    "data-analysis",
    "physics",
]
requires-python = ">=3.12"
license = "MIT"
dependencies = [
    "numpy>=1.24.0,<2.1.0",
    "scipy>=1.9.0",
    "matplotlib>=3.5.0",
]
[[project.authors]]
name = "Wei Chen"
email = "wchen@anl.gov"

[[project.authors]]
name = "Hongrui He"

[[project.maintainers]]
name = "Wei Chen"
email = "wchen@anl.gov"

[project.optional-dependencies]
# Performance optimization (JIT compilation)
performance = [
    "numba>=0.61.0,<0.62.0",
    "psutil>=5.8.0",
]

# MCMC sampling (CPU backend - PyMC)
mcmc = [
    "pymc>=5.0.0",
    "arviz>=0.12.0",
    "pytensor>=2.8.0",
    "corner>=2.2.0",
]

# GPU acceleration (JAX/NumPyro backend)
gpu = [
    "jax[cuda12-local]>=0.7.0 ; sys_platform == 'linux'",
    "jax>=0.7.0 ; sys_platform != 'linux'",
    "jaxlib>=0.4.35",
    "numpyro>=0.13.0",
]

# Robust optimization methods
robust = [
    "cvxpy>=1.4.0",
    "scikit-learn>=1.3.0",  # Required for resampling in robust.py
]

# Commercial optimization solver (requires license)
gurobi = [
    "gurobipy>=11.0.0",
]

# Data handling
data = [
    "xpcs-viewer>=1.0.4",
]

# Development tools
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.6.0",
    "pytest-html>=4.1.1",
    "pytest-metadata>=3.1.1",
    "coverage>=6.2.0",
    # Code quality
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "isort>=5.12.0",
    # Development workflow
    "pre-commit>=3.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
    # Shell completion
    "argcomplete>=3.0.0",
]

# Documentation building
docs = [
    "sphinx>=6.0.0",
    "furo>=2024.1.29",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.20.0",
    "numpydoc>=1.2.0",
    "sphinx-copybutton>=0.5.0",
]

# Complete installation (all scientific features)
all = [
    "homodyne-analysis[performance,mcmc,gpu,robust,data]",
]

# Full development environment
dev-all = [
    "homodyne-analysis[all,dev,docs]",
]

[project.urls]
Homepage = "https://github.com/imewei/homodyne"
Documentation = "https://homodyne.readthedocs.io/"
Repository = "https://github.com/imewei/homodyne"
"Bug Tracker" = "https://github.com/imewei/homodyne/issues"
Changelog = "https://github.com/imewei/homodyne/blob/main/CHANGELOG.md"
"Source Code" = "https://github.com/imewei/homodyne"
Download = "https://pypi.org/project/homodyne-analysis/"
Funding = "https://www.anl.gov/"
Paper = "https://doi.org/10.1073/pnas.2401162121"

[project.scripts]
homodyne = "homodyne.run_homodyne:main"
homodyne-config = "homodyne.create_config:main"
homodyne-gpu = "homodyne.runtime.gpu.gpu_wrapper:main"
homodyne-post-install = "homodyne.post_install:main"
homodyne-cleanup = "homodyne.uninstall_scripts:main"
homodyne-gpu-optimize = "homodyne.runtime.gpu.optimizer:main"
homodyne-validate = "homodyne.runtime.utils.system_validator:main"

[tool.setuptools]
include-package-data = true


[tool.black]
line-length = 88
target-version = [ "py313", "py312",]
include = "\\.pyi?$"
extend-exclude = "/(\n  # directories\n  \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | \\.ruff_cache\n  | build\n  | dist\n  | __pycache__\n)/\n"

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = [ "homodyne",]
skip_glob = [ "build/*", "dist/*", "*.egg-info/*",]

[tool.ruff]
line-length = 88
target-version = "py313"
exclude = [ ".eggs", ".git", ".mypy_cache", ".ruff_cache", ".tox", ".venv", "__pycache__", "build", "dist", "homodyne/_version.py",]

[tool.mypy]
python_version = "3.13"
mypy_path = "homodyne/typings"
explicit_package_bases = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
pretty = true
exclude = [ "homodyne_complete", "homodyne/_version.py",]
[[tool.mypy.overrides]]
module = [ "numba.*", "jax.*", "jaxlib.*", "pymc.*", "arviz.*", "pytensor.*", "corner.*", "cvxpy.*", "gurobipy.*", "xpcs_viewer.*", "sklearn.*",]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [ "homodyne.tests.*",]
disallow_untyped_defs = false
check_untyped_defs = false

[tool.bandit]
exclude_dirs = [ "homodyne/tests", "tests", "build", "dist",]
skips = [ "B101", "B110", "B403", "B404", "B603",]
severity_level = "medium"
format = "json"
output = "bandit-report.json"

[tool.setuptools.package-data]
homodyne = [
    "*.json",
    "runtime/**/*",
    "typings/**/*.pyi",
    "optimization/mcmc_cpu_backend.py",
    "optimization/mcmc_gpu_backend.py",
    "py.typed",
]

[tool.ruff.lint]
select = [ "E", "W", "F", "I", "B", "C4", "UP", "RUF",]
ignore = [ "E501", "B008", "RUF001", "RUF002", "RUF003",]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [ "--strict-config", "--strict-markers", "--color=yes", "-v", "-rA", "--tb=short", "--maxfail=5", "--show-capture=no",]
testpaths = [ "homodyne/tests",]
markers = [
    # Execution time markers
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests that run quickly (< 1s)",
    
    # Test type markers
    "unit: marks unit tests (isolated, no external dependencies)",
    "integration: marks tests as integration tests", 
    "system: marks system-level tests (require environment setup)",
    "regression: marks tests for performance regression detection",
    
    # Feature-specific markers
    "mcmc: marks tests requiring MCMC dependencies",
    "mcmc_integration: marks tests for MCMC cross-backend integration",
    "performance: marks performance-related tests",
    "benchmark: marks tests for benchmarking (requires pytest-benchmark)",
    "memory: marks tests that monitor memory usage",
    "import_time: marks tests that measure import performance",
    "optimization: marks tests for optimization methods (classical, robust, MCMC)",
    "jit_compilation: marks tests for enhanced JIT compilation optimization",
    "batch_processing: marks tests for batch processing optimization",
    "cvxpy_optimization: marks tests for CVXPY solver optimization",
    "configuration_validation: marks tests for configuration validation features",
    
    # Computational method markers
    "irls: marks tests related to IRLS variance estimation and convergence",
    "hybrid_irls: marks tests specifically for hybrid limited-iteration IRLS approach",
    "weighted_refit: marks tests for weighted refit functionality", 
    "mad_estimation: marks tests for MAD (Median Absolute Deviation) estimation",
    "vectorized: marks tests for vectorized/optimized computation methods",
    "numba: marks tests requiring Numba JIT compilation",
    "convergence: marks tests for iterative algorithm convergence behavior",
    "angle_filtering: marks tests for angle filtering optimization features",
    
    # Platform/dependency markers
    "jax: marks tests requiring JAX dependencies",
    "gpu: marks tests that can utilize GPU acceleration (requires appropriate JAX installation)",
    
    # Environment markers
    "ci_skip: marks tests to skip in CI environments",
    "ci: marks tests suitable for CI execution (unit and regression tests)",
]
filterwarnings = [ "error", "ignore::UserWarning", "ignore::DeprecationWarning", "ignore::PendingDeprecationWarning",]

[tool.coverage.run]
source = [ "homodyne",]
omit = [ "*/tests/*", "*/test_*.py", "setup.py",]

[tool.coverage.report]
exclude_lines = [ "pragma: no cover", "def __repr__", "if self.debug:", "if settings.DEBUG", "raise AssertionError", "raise NotImplementedError", "if 0:", "if __name__ == .__main__.:", "class .*\\bProtocol\\):", "@(abc\\.)?abstractmethod",]

[tool.setuptools.packages.find]
exclude = [ "tests*", "docs*", "examples*", "homodyne.tests*",]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [ "F401",]
"tests/**/*.py" = [ "F401", "F811",]
