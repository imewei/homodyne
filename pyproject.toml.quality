# Quality Configuration Section for pyproject.toml
# Add these sections to your existing pyproject.toml

[tool.mypy]
python_version = "3.13"
warn_return_any = false  # Disabled for scientific computing
warn_unused_configs = true
disallow_untyped_defs = false  # Relaxed for scientific functions
disallow_incomplete_defs = false  # Relaxed for scientific functions
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
ignore_missing_imports = true

# Scientific computing specific ignores
[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "scipy.*", 
    "matplotlib.*",
    "numba.*",
    "jax.*",
    "cvxpy.*",
    "gurobipy.*"
]
ignore_missing_imports = true

[tool.ruff]
# Target Python 3.13+
target-version = "py313"
line-length = 88
respect-gitignore = true

# Enable comprehensive rule sets
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # Pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # NumPy-specific rules
    "PERF", # Perflint
    "LOG",  # flake8-logging
    "RUF",  # Ruff-specific rules
]

# Scientific computing specific ignores
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package  
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "ANN001", # Missing type annotation for function argument
    "ANN002", # Missing type annotation for *args
    "ANN003", # Missing type annotation for **kwargs
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "S101",   # Use of assert detected (common in scientific code)
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "C901",   # Function is too complex
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "E501",   # Line too long (handled by formatter)
    "COM812", # Trailing comma missing (handled by formatter)
]

# Per-file ignores for specific scientific computing patterns
[tool.ruff.per-file-ignores]
"homodyne/tests/*" = [
    "S101",    # Assert statements OK in tests
    "D",       # Skip docstring requirements in tests
    "ANN",     # Skip type annotations in tests
    "PLR2004", # Magic values OK in tests
]
"homodyne/optimization/*" = [
    "PLR0913", # Many parameters OK for optimization functions
    "C901",    # Complex functions OK for optimization algorithms
]
"scripts/*" = [
    "T20",     # Print statements OK in scripts
    "INP001",  # Implicit namespace packages OK for scripts
]

[tool.ruff.pydocstyle]
convention = "numpy"  # Use NumPy docstring style

[tool.ruff.isort]
known-first-party = ["homodyne"]
force-single-line = true
force-sort-within-sections = true

[tool.coverage.run]
source = ["homodyne"]
parallel = true
omit = [
    "homodyne/tests/*",
    "homodyne/_version.py",
    "setup.py",
    "*/site-packages/*"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstract",
    "warnings.warn"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--color=yes",
    "-ra"
]
testpaths = ["homodyne/tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests as fast (< 1 second)",
    "unit: unit tests",
    "integration: integration tests", 
    "mcmc: MCMC-specific tests",
    "performance: performance benchmark tests",
    "gpu: tests requiring GPU",
    "optional_deps: tests requiring optional dependencies"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:numba.*",
    "ignore::RuntimeWarning:numpy.*"
]

[tool.bandit]
exclude_dirs = ["homodyne/tests", "build", "dist"]
skips = [
    "B101",  # assert_used - common in scientific code
    "B110",  # try_except_pass - sometimes needed for optional imports
    "B403",  # pickle usage - needed for scientific data
    "B404",  # import_subprocess - needed for system integration
    "B603",  # subprocess_without_shell_equals_true
]

[tool.black]
line-length = 88
target-version = ["py313"]
extend-exclude = '''
/(
  | build
  | dist  
  | \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | venv
)/
'''