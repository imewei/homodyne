[tool:pytest]
# Benchmark and performance test configuration
# This configuration is specifically for running performance benchmarks and slow tests
# Usage: pytest -c pytest-benchmarks.ini

testpaths = homodyne/tests/performance homodyne/tests/mcmc
addopts =
    --strict-config
    --strict-markers
    --tb=short
    --maxfail=5
    -v
    --durations=50
    --benchmark-only
    --benchmark-sort=mean
    --benchmark-autosave
    --benchmark-histogram
    --benchmark-storage=file://.benchmarks
    -m "benchmark or performance or slow"
    --timeout=600
    -rA

# Include all performance-related test directories
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Custom markers for benchmarks
markers =
    slow: marks tests as slow (>1s execution time)
    integration: marks tests as integration tests
    mcmc: marks tests requiring MCMC dependencies
    performance: marks performance-related tests
    benchmark: marks tests for benchmarking (requires pytest-benchmark)
    memory: marks tests that monitor memory usage
    regression: marks tests for performance regression detection
    import_time: marks tests that measure import performance
    optimization: marks tests for Phase 3 batch optimization features
    jax: marks tests requiring JAX dependencies
    gpu: marks tests that can utilize GPU acceleration (requires appropriate JAX installation)
    fast: marks tests that run quickly (< 1s)
    unit: marks unit tests (isolated, no external dependencies)
    system: marks system-level tests (require environment setup)
    ci_skip: marks tests to skip in CI environments
    ci: marks tests suitable for CI execution (unit and regression tests)

# Benchmark-specific settings
[tool:pytest-benchmark]
histogram = true
sort = mean
min_rounds = 5
max_time = 2.0
min_time = 0.000005
warmup = false
warmup_iterations = 100000
calibration_precision = 10
disable_gc = false
timer = time.perf_counter

# Skip patterns - focus only on benchmark tests
collect_ignore = homodyne/tests/unit homodyne/tests/regression homodyne/tests/integration/test_unified_integration.py homodyne/tests/integration/test_isotropic_mode_integration.py

# Timeout for long-running benchmarks (10 minutes)
timeout = 600