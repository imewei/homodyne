[tool:pytest]
# Optimized CI configuration for GitHub Actions
testpaths = homodyne/tests/unit homodyne/tests/regression
addopts =
    --strict-config
    --strict-markers
    --tb=line
    --maxfail=15
    --color=yes
    -q
    --durations=15
    -m "not slow and not integration and not mcmc and not benchmark"
    -n auto
    --cov=homodyne
    --cov-report=xml
    --cov-report=term-missing
    --cov-fail-under=75
    -rA
    --timeout=300

# Timeout for CI tests
timeout = 300

# Parallel execution settings
addopts += --dist=loadscope

# Skip patterns for CI - exclude slow test directories but keep fast unit tests
collect_ignore = ["homodyne/tests/performance", "homodyne/tests/system", "homodyne/tests/integration", "homodyne/tests/mcmc"]

# Custom markers
markers =
    # Execution time markers
    slow: marks tests as slow (deselect with '-m "not slow"')
    fast: marks tests that run quickly (< 1s)
    
    # Test type markers
    unit: marks unit tests (isolated, no external dependencies)
    integration: marks tests as integration tests
    system: marks system-level tests (require environment setup)
    regression: marks tests for performance regression detection
    
    # Feature-specific markers
    mcmc: marks tests requiring MCMC dependencies
    mcmc_integration: marks tests for MCMC cross-backend integration
    performance: marks performance-related tests
    benchmark: marks tests for benchmarking (requires pytest-benchmark)
    memory: marks tests that monitor memory usage
    import_time: marks tests that measure import performance
    optimization: marks tests for optimization methods (classical, robust, MCMC)
    jit_compilation: marks tests for enhanced JIT compilation optimization
    batch_processing: marks tests for batch processing optimization
    cvxpy_optimization: marks tests for CVXPY solver optimization
    configuration_validation: marks tests for configuration validation features
    
    # Computational method markers
    irls: marks tests related to IRLS variance estimation and convergence
    hybrid_irls: marks tests specifically for hybrid limited-iteration IRLS approach
    weighted_refit: marks tests for weighted refit functionality
    mad_estimation: marks tests for MAD (Median Absolute Deviation) estimation
    vectorized: marks tests for vectorized/optimized computation methods
    numba: marks tests requiring Numba JIT compilation
    convergence: marks tests for iterative algorithm convergence behavior
    angle_filtering: marks tests for angle filtering optimization features
    
    # Platform/dependency markers
    jax: marks tests requiring JAX dependencies
    gpu: marks tests that can utilize GPU acceleration (requires appropriate JAX installation)
    
    # Environment markers
    ci_skip: marks tests to skip in CI environments
    ci: marks tests suitable for CI execution (unit and regression tests)
