[tool:pytest]
# Full test suite configuration with coverage
testpaths = homodyne/tests
addopts =
    --strict-config
    --strict-markers
    --tb=short
    --maxfail=20
    -v
    --cov=homodyne
    --cov-report=html
    --cov-report=term-missing
    --cov-fail-under=80
    --durations=25
    -m "not benchmark"
    -n auto
    -rA
    --timeout=600

# Run all tests including slow ones - no marker filter
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Custom markers
markers =
    # Execution time markers
    slow: marks tests as slow (deselect with '-m "not slow"')
    fast: marks tests that run quickly (< 1s)
    
    # Test type markers
    unit: marks unit tests (isolated, no external dependencies)
    integration: marks tests as integration tests
    system: marks system-level tests (require environment setup)
    regression: marks tests for performance regression detection
    
    # Feature-specific markers
    mcmc: marks tests requiring MCMC dependencies
    mcmc_integration: marks tests for MCMC cross-backend integration
    performance: marks performance-related tests
    benchmark: marks tests for benchmarking (requires pytest-benchmark)
    memory: marks tests that monitor memory usage
    import_time: marks tests that measure import performance
    optimization: marks tests for optimization methods (classical, robust, MCMC)
    jit_compilation: marks tests for enhanced JIT compilation optimization
    batch_processing: marks tests for batch processing optimization
    cvxpy_optimization: marks tests for CVXPY solver optimization
    configuration_validation: marks tests for configuration validation features
    
    # Computational method markers
    irls: marks tests related to IRLS variance estimation and convergence
    hybrid_irls: marks tests specifically for hybrid limited-iteration IRLS approach
    weighted_refit: marks tests for weighted refit functionality
    mad_estimation: marks tests for MAD (Median Absolute Deviation) estimation
    vectorized: marks tests for vectorized/optimized computation methods
    numba: marks tests requiring Numba JIT compilation
    convergence: marks tests for iterative algorithm convergence behavior
    angle_filtering: marks tests for angle filtering optimization features
    
    # Platform/dependency markers
    jax: marks tests requiring JAX dependencies
    gpu: marks tests that can utilize GPU acceleration (requires appropriate JAX installation)
    
    # Environment markers
    ci_skip: marks tests to skip in CI environments
    ci: marks tests suitable for CI execution (unit and regression tests)

# Coverage settings
[coverage:run]
source = homodyne
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */runtime/*
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abstractproperty
    pass
    logger\.debug
    logger\.info
    warnings\.warn
