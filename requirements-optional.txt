# Optional dependencies for Homodyne Scattering Analysis Package with isolated MCMC backends
# Generated from pyproject.toml [project.optional-dependencies]
# Latest update: Isolated MCMC backend architecture (CPU/GPU separation)

# Include core dependencies
-r requirements.txt

# Data handling
xpcs-viewer>=1.0.4

# Performance optimization (includes JAX backend for GPU acceleration)
numba>=0.61.0,<0.62.0
jax[cuda12-local]>=0.7.0 ; sys_platform == 'linux'
jax>=0.7.0 ; sys_platform != 'linux'
jaxlib>=0.4.35
psutil>=5.8.0

# MCMC Isolated Backends (CPU and GPU completely separated)
# CPU Backend (Pure PyMC - no JAX contamination)
pymc>=5.0.0
arviz>=0.12.0
pytensor>=2.8.0
corner>=2.2.0

# GPU Backend (Pure NumPyro/JAX - no PyMC contamination)  
numpyro>=0.13.0
# Note: JAX dependencies already included in performance section above

# Robust optimization
cvxpy>=1.4.0

# Gurobi optimization solver (requires license)
gurobipy>=11.0.0

# Shell completion and enhanced virtual environment integration
argcomplete>=3.0.0

# Architecture Notes: Isolated Backend System
# - CPU Backend (mcmc.py): Pure PyMC implementation, completely isolated from JAX
# - GPU Backend (mcmc_gpu.py): Pure NumPyro/JAX implementation, completely isolated from PyMC
# - Backend Wrappers: mcmc_cpu_backend.py and mcmc_gpu_backend.py handle isolation
# - Environment Configuration: Each backend configures its own environment independently
# - Cross-platform: 
#   * Linux: Full GPU support with CUDA 12.6+ for GPU backend
#   * macOS/Windows: CPU-only for both backends (JAX CPU fallback for GPU backend)
# - Shell completion: Enhanced support with backend-specific commands
# - Command shortcuts: 
#   * homodyne: Uses CPU backend (pure PyMC)
#   * homodyne-gpu: Uses GPU backend (pure NumPyro/JAX with CPU fallback)
